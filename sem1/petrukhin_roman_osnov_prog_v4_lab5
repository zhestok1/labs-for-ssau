#include <iostream>
#include <vector>
#include <fstream>
#include <cstdlib> // Для exit

using namespace std;

class nAngle {
private:
    int numOfSides;
    vector<int> lengths;

public:
    nAngle(int n = 0) : numOfSides(n), lengths(n) {}

    int perimeter() const {
        int perim = 0;
        for (int length : lengths) {
            perim += length;
        }
        return perim;
    }

    friend istream& operator>>(istream& in, nAngle& polygon) {
        in >> polygon.numOfSides;

        // Проверка на положительное количество сторон
        if (polygon.numOfSides <= 0) {
            cerr << "Количество сторон должно быть положительным числом!" << endl;
            in.setstate(ios::failbit); // Устанавливаем состояние ошибки
            return in;
        }

        polygon.lengths.resize(polygon.numOfSides);
        for (int i = 0; i < polygon.numOfSides; ++i) {
            in >> polygon.lengths[i];

            // Проверка на положительное значение длины стороны
            if (polygon.lengths[i] <= 0) {
                cerr << "Длина стороны должна быть положительным числом!" << endl;
                in.setstate(ios::failbit);
                return in;
            }
        }
        return in;
    }

    friend ostream& operator<<(ostream& out, const nAngle& polygon) {
        out << "Количество сторон: " << polygon.numOfSides << "\nДлины сторон: ";
        for (int length : polygon.lengths) {
            out << length << " ";
        }
        return out;
    }
};

void readDataFromConsole(nAngle& polygon) {
    cout << "Введите количество сторон: ";
    while (!(cin >> polygon)) {
        cin.clear(); 
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); 
        cout << "Попробуйте снова. Введите корректные данные для многоугольника: ";
    }
}

void readDataFromFile(nAngle& polygon, const string& filename) {
    ifstream inFile(filename);
    if (!inFile) {
        cerr << "Ошибка открытия файла!" << endl;
        exit(1);
    }
    while (!(inFile >> polygon)) { // Проверка на успешное считывание из файла
        cerr << "Ошибка при чтении данных из файла." << endl;
        exit(1);
    }
}

void writeDataToConsole(const nAngle& polygon) {
    cout << "Данные многоугольника:\n" << polygon;
    cout << "Периметр многоугольника: " << polygon.perimeter() << endl;
}

void writeDataToFile(const nAngle& polygon, const string& filename) {
    ofstream outFile(filename);
    if (!outFile) {
        cerr << "Ошибка открытия файла для записи!" << endl;
        exit(1);
    }
    outFile << "Данные многоугольника:\n" << polygon;
    outFile << "Периметр многоугольника: " << polygon.perimeter() << endl;
}

int main() {
    setlocale(LC_ALL, "RU");
    int choice;
    bool continueProgram = true;

    do {
        nAngle polygon;  // Инициализация пустого объекта

        cout << "Выберите источник данных:\n1. Консоль\n2. Файл\n3. Выход\nВаш выбор: ";
        cin >> choice;

        if (choice == 1) {
            readDataFromConsole(polygon);
        }
        else if (choice == 2) {
            string filename;
            cout << "Введите имя файла для чтения: ";
            cin >> filename;
            readDataFromFile(polygon, filename);
        }
        else {
            continueProgram = false; // Завершение программы при выборе выхода
        }

        // Проверка, продолжать ли вывод
        if (continueProgram) {
            cout << "Выберите способ вывода результата:\n1. Консоль\n2. Файл\n3. Выход\nВаш выбор: ";
            cin >> choice;

            if (choice == 1) {
                writeDataToConsole(polygon);
            }
            else if (choice == 2) {
                string filename;
                cout << "Введите имя файла для записи: ";
                cin >> filename;
                writeDataToFile(polygon, filename);
            }
            else {
                continueProgram = false; // Завершение программы при выборе выхода
            }
        }

    } while (continueProgram);

    cout << "Программа завершена!" << endl;
    return 0;
}
